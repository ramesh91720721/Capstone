1.1 Create a Spring Boot Project
Use Spring Initializr to generate a Spring Boot project with:

Spring Web
Spring Data JPA
MySQL Driver
Extract the project and open it in your favorite IDE (e.g., IntelliJ IDEA, VS Code, Eclipse).

1.2 Configure application.properties
Set up MySQL connection in src/main/resources/application.properties:

properties
Copy
Edit
spring.datasource.url=jdbc:mysql://localhost:3306/librarydb
spring.datasource.username=root
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
1.3 Create the Entity Class (Book.java)
Define the entity to map with the database table:

java
Copy
Edit
package com.example.library.model;

import jakarta.persistence.*;

@Entity
@Table(name = "books")
public class Book {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String title;
    private String author;
    private String ISBN;
    private int qty;
    private int branch_id;
    private boolean available;

    // Constructors
    public Book() {}

    public Book(String title, String author, String ISBN, int qty, int branch_id, boolean available) {
        this.title = title;
        this.author = author;
        this.ISBN = ISBN;
        this.qty = qty;
        this.branch_id = branch_id;
        this.available = available;
    }

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public String getAuthor() { return author; }
    public void setAuthor(String author) { this.author = author; }

    public String getISBN() { return ISBN; }
    public void setISBN(String ISBN) { this.ISBN = ISBN; }

    public int getQty() { return qty; }
    public void setQty(int qty) { this.qty = qty; }

    public int getBranch_id() { return branch_id; }
    public void setBranch_id(int branch_id) { this.branch_id = branch_id; }

    public boolean isAvailable() { return available; }
    public void setAvailable(boolean available) { this.available = available; }
}
1.4 Create the Repository Interface (BookRepository.java)
This interface allows us to perform database operations.

java
Copy
Edit
package com.example.library.repository;

import com.example.library.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface BookRepository extends JpaRepository<Book, Long> {
}
1.5 Create the Service Layer (BookService.java)
Service layer handles business logic.

java
Copy
Edit
package com.example.library.service;

import com.example.library.model.Book;
import com.example.library.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookService {

    @Autowired
    private BookRepository bookRepository;

    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }
}
1.6 Create the Controller (BookController.java)
Expose REST API endpoints.

java
Copy
Edit
package com.example.library.controller;

import com.example.library.model.Book;
import com.example.library.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/books")
@CrossOrigin(origins = "http://localhost:3000") // Allow React frontend to access API
public class BookController {

    @Autowired
    private BookService bookService;

    @GetMapping
    public List<Book> getAllBooks() {
        return bookService.getAllBooks();
    }
}
1.7 Create MySQL Table and Insert Sample Data
Run the following SQL commands in MySQL:

sql
Copy
Edit
CREATE DATABASE librarydb;
USE librarydb;

CREATE TABLE books (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    author VARCHAR(255),
    ISBN VARCHAR(50),
    qty INT,
    branch_id INT,
    available BOOLEAN
);

INSERT INTO books (title, author, ISBN, qty, branch_id, available)
VALUES 
('Spring Boot Guide', 'John Doe', '1234567890', 10, 1, true),
('React Basics', 'Jane Smith', '0987654321', 5, 2, false);
Step 2: Set Up the Frontend (React)
2.1 Create a React Project
Run:

sh
Copy
Edit
npx create-react-app book-app
cd book-app
npm start
2.2 Install Axios for API Requests
Run:

sh
Copy
Edit
npm install axios
2.3 Fetch Books from Backend (BookList.js)
Create a new file src/components/BookList.js:

jsx
Copy
Edit
import React, { useEffect, useState } from "react";
import axios from "axios";

const BookList = () => {
    const [books, setBooks] = useState([]);

    useEffect(() => {
        axios.get("http://localhost:8080/api/books")
            .then(response => setBooks(response.data))
            .catch(error => console.error("Error fetching books:", error));
    }, []);

    return (
        <div>
            <h2>Book List</h2>
            <table border="1">
                <thead>
                    <tr>
                        <th>Title</th>
                        <th>Author</th>
                        <th>ISBN</th>
                        <th>Quantity</th>
                        <th>Branch ID</th>
                        <th>Available</th>
                    </tr>
                </thead>
                <tbody>
                    {books.map(book => (
                        <tr key={book.id}>
                            <td>{book.title}</td>
                            <td>{book.author}</td>
                            <td>{book.ISBN}</td>
                            <td>{book.qty}</td>
                            <td>{book.branch_id}</td>
                            <td>{book.available ? "Yes" : "No"}</td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default BookList;
2.4 Display Books in App.js
Modify src/App.js:

jsx
Copy
Edit
import React from "react";
import BookList from "./components/BookList";

function App() {
    return (
        <div>
            <h1>Library Management System</h1>
            <BookList />
        </div>
    );
}

export default App;
Step 3: Run Everything
3.1 Start MySQL Server
Ensure MySQL is running.

3.2 Start Spring Boot Backend
Run in terminal:

sh
Copy
Edit
mvn spring-boot:run
or

sh
Copy
Edit
./mvnw spring-boot:run
3.3 Start React Frontend
In a new terminal, navigate to book-app and run:

sh
Copy
Edit
npm start
Final Outcome
The backend exposes API at http://localhost:8080/api/books.
The frontend fetches and displays the books in a table.